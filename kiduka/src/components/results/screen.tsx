// src/screens/results/ResultsOverviewScreen.tsx 
import React from 'react';
import { ScrollView, StyleSheet, Share } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Colors, Layout } from '../../constants';
import { SoilAnalysisResult } from '../../types/soil';
import { ResultsHeader } from '../../components/results/resultsHeader';
import { ReportHeader } from '../../components/results/reportHeader';
import { OverallStatusCard } from '../../components/results/overallStatusCard';
import { RecommendationCard } from '../../components/results/recommendationCard';
import { DetailedAnalysisCard } from '../../components/results/detailedAnalysisCard';
import { ActionPlanCard } from '../../components/results/actionPlanCard';
import { NearbyAgrovetsCard } from '../../components/results/nearbyAgrovetsCard';

interface ResultsOverviewScreenProps {
  results: SoilAnalysisResult;
  onBack: () => void;
  onSaveToFavorites: () => void;
}

export const ResultsOverviewScreen: React.FC<ResultsOverviewScreenProps> = ({
  results,
  onBack,
  onSaveToFavorites,
}) => {
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric',
    });
  };

  const handleShare = async () => {
    try {
      const shareContent = `
ðŸŒ± Soil Analysis Results
ðŸ“… Date: ${formatDate(results.timestamp)}
ðŸŽ¯ Fertility Status: ${results.soil_fertility_status}
ðŸ’Š Recommendation: ${results.fertilizer_recommendation}
ðŸ“Š Confidence: ${Math.round(results.soil_fertility_confidence * 100)}%

${results.structured_response?.explanation?.summary || ''}

Generated by Kiduka - Agricultural Soil Analysis App
      `.trim();

      await Share.share({
        message: shareContent,
        title: 'Soil Analysis Results',
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea} edges={['top', 'bottom']}>
      <StatusBar style="dark" />

      <ResultsHeader
        onBack={onBack}
        onShare={handleShare}
        onSaveToFavorites={onSaveToFavorites}
      />

      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        <ReportHeader timestamp={results.timestamp} />
        
        <OverallStatusCard
          status={results.soil_fertility_status}
          confidence={results.soil_fertility_confidence}
        />
        
        <RecommendationCard
          recommendation={results.fertilizer_recommendation}
          confidence={results.fertilizer_confidence}
          justification={results.structured_response?.fertilizer_justification}
        />
        
        {results.structured_response?.explanation && (
          <DetailedAnalysisCard
            explanation={results.structured_response.explanation}
          />
        )}
        
        {results.structured_response?.recommendations && (
          <ActionPlanCard
            recommendations={results.structured_response.recommendations.map(r => ({
              ...r,
              priority: r.priority as "high" | "medium" | "low",
            }))}
            longTermStrategy={results.structured_response.long_term_strategy}
          />
        )}
        
        <NearbyAgrovetsCard agrovets={results.nearest_agrovets} />
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: Colors.background.primary,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: Layout.spacing.lg,
    paddingBottom: Layout.spacing.xl,
  },
});