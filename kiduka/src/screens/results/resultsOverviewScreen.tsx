// src/screens/results/ResultsOverviewScreen.tsx
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Share,
  Dimensions,
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Ionicons } from '@expo/vector-icons';
import { Colors, Fonts, Layout } from '../../constants';
import { Card } from '../../components/ui/cards/card';
import { StatusBadge } from '../../components/ui/statusBadge';
import { ProgressBar } from '../../components/ui/progressBar';
import { SoilAnalysisResult } from '../../types/soil';

interface ResultsOverviewScreenProps {
  results: SoilAnalysisResult;
  onBack: () => void;
  onViewDetails: () => void;
  onFindAgrovets: () => void;
  onSaveToFavorites: () => void;
}

export const ResultsOverviewScreen: React.FC<ResultsOverviewScreenProps> = ({
  results,
  onBack,
  onViewDetails,
  onFindAgrovets,
  onSaveToFavorites,
}) => {
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const handleShare = async () => {
    try {
      const shareContent = `
Soil Analysis Results
Date: ${formatDate(results.timestamp)}
Fertility Status: ${results.soil_fertility_status}
Fertilizer Recommendation: ${results.fertilizer_recommendation}
Confidence: ${Math.round(results.soil_fertility_confidence * 100)}%

Generated by Kiduka - Agricultural Soil Analysis App
      `.trim();

      await Share.share({
        message: shareContent,
        title: 'Soil Analysis Results',
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  const renderHeader = () => (
    <View style={styles.header}>
      <TouchableOpacity onPress={onBack} style={styles.backButton}>
        <Ionicons name="arrow-back" size={24} color={Colors.text.primary} />
      </TouchableOpacity>
      
      <Text style={styles.headerTitle}>Analysis Results</Text>
      
      <View style={styles.headerActions}>
        <TouchableOpacity onPress={handleShare} style={styles.headerAction}>
          <Ionicons name="share-outline" size={24} color={Colors.text.primary} />
        </TouchableOpacity>
        
        <TouchableOpacity onPress={onSaveToFavorites} style={styles.headerAction}>
          <Ionicons name="star-outline" size={24} color={Colors.text.primary} />
        </TouchableOpacity>
      </View>
    </View>
  );

  const renderReportHeader = () => (
    <View style={styles.reportHeader}>
      <Text style={styles.reportTitle}>üìä Soil Health Report</Text>
      <Text style={styles.reportLocation}>
        Field Analysis - {results.prediction_id?.slice(-8) || 'Unknown'}
      </Text>
      <Text style={styles.reportDate}>üìÖ {formatDate(results.timestamp)}</Text>
    </View>
  );

  const renderOverallStatus = () => (
    <Card style={styles.statusCard}>
      <Text style={styles.cardTitle}>üéØ OVERALL STATUS</Text>
      
      <View style={styles.statusContent}>
        <StatusBadge 
          status={results.soil_fertility_status} 
          variant="soil" 
          size="lg" 
        />
        
        <View style={styles.confidenceSection}>
          <ProgressBar 
            progress={results.soil_fertility_confidence} 
            showPercentage={true}
            color={Colors.primary.green}
            style={styles.confidenceBar}
          />
          <Text style={styles.confidenceLabel}>Confidence</Text>
        </View>
      </View>
    </Card>
  );

  const renderRecommendation = () => (
    <Card style={styles.recommendationCard}>
      <Text style={styles.cardTitle}>üíä RECOMMENDATION</Text>
      
      <View style={styles.recommendationContent}>
        <Text style={styles.fertilizerName}>
          {results.fertilizer_recommendation}
        </Text>
        
        <View style={styles.recommendationConfidence}>
          <ProgressBar 
            progress={results.fertilizer_confidence} 
            showPercentage={true}
            color={Colors.primary.accent}
            style={styles.confidenceBar}
          />
          <Text style={styles.confidenceLabel}>Confidence</Text>
        </View>
        
        <TouchableOpacity onPress={onViewDetails} style={styles.detailsButton}>
          <Text style={styles.detailsButtonText}>View Details</Text>
          <Ionicons name="arrow-forward" size={16} color={Colors.primary.green} />
        </TouchableOpacity>
      </View>
    </Card>
  );

  const renderActionButtons = () => (
    <View style={styles.actionButtons}>
      <TouchableOpacity 
        onPress={onViewDetails} 
        style={[styles.actionButton, styles.detailsActionButton]}
      >
        <Text style={styles.actionButtonIcon}>üìà</Text>
        <Text style={[styles.actionButtonText, styles.detailsButtonText]}>
          Details
        </Text>
      </TouchableOpacity>
      
      <TouchableOpacity 
        onPress={onFindAgrovets} 
        style={[styles.actionButton, styles.agrovetActionButton]}
      >
        <Text style={styles.actionButtonIcon}>üè™</Text>
        <Text style={[styles.actionButtonText, styles.agrovetButtonText]}>
          Buy Nearby
        </Text>
      </TouchableOpacity>
    </View>
  );

  const renderAIExplanation = () => (
    <Card style={styles.explanationCard}>
      <View style={styles.explanationHeader}>
        <Text style={styles.cardTitle}>üß† AI Explanation</Text>
      </View>
      
      <Text style={styles.explanationText} numberOfLines={3}>
        {results.structured_response?.explanation?.summary || 
         `Your soil shows ${results.soil_fertility_status.toLowerCase()} fertility with ${results.fertilizer_recommendation} recommended to improve nutrient availability...`}
      </Text>
      
      <TouchableOpacity onPress={onViewDetails} style={styles.readMoreButton}>
        <Text style={styles.readMoreText}>Read Full Analysis</Text>
        <Ionicons name="arrow-forward" size={16} color={Colors.primary.green} />
      </TouchableOpacity>
    </Card>
  );

  return (
    <View style={styles.container}>
      <StatusBar style="dark" />
      
      {renderHeader()}
      
      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {renderReportHeader()}
        {renderOverallStatus()}
        {renderRecommendation()}
        {renderActionButtons()}
        {renderAIExplanation()}
      </ScrollView>
    </View>
  );
};

const { width } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: Colors.background.primary,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: Layout.spacing.lg,
    paddingTop: Layout.safeArea.top,
    paddingBottom: Layout.spacing.md,
    borderBottomWidth: 1,
    borderBottomColor: Colors.border,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: Colors.background.card,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: Colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  headerTitle: {
    fontSize: Fonts.sizes.lg,
    fontFamily: Fonts.families.poppins.semiBold,
    color: Colors.text.primary,
    flex: 1,
    textAlign: 'center',
    marginLeft: -32, // Compensate for back button
  },
  headerActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerAction: {
    marginLeft: Layout.spacing.md,
    padding: Layout.spacing.xs,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: Layout.spacing.lg,
  },
  reportHeader: {
    alignItems: 'center',
    marginBottom: Layout.spacing.xl,
  },
  reportTitle: {
    fontSize: Fonts.sizes.xl,
    fontFamily: Fonts.families.poppins.bold,
    color: Colors.text.primary,
    marginBottom: Layout.spacing.xs,
  },
  reportLocation: {
    fontSize: Fonts.sizes.base,
    fontFamily: Fonts.families.roboto.medium,
    color: Colors.text.secondary,
    marginBottom: Layout.spacing.xs,
  },
  reportDate: {
    fontSize: Fonts.sizes.sm,
    fontFamily: Fonts.families.roboto.regular,
    color: Colors.text.secondary,
  },
  statusCard: {
    marginBottom: Layout.spacing.lg,
    backgroundColor: Colors.background.card,
  },
  cardTitle: {
    fontSize: Fonts.sizes.base,
    fontFamily: Fonts.families.poppins.bold,
    color: Colors.text.primary,
    marginBottom: Layout.spacing.lg,
  },
  statusContent: {
    alignItems: 'center',
  },
  confidenceSection: {
    width: '100%',
    marginTop: Layout.spacing.lg,
  },
  confidenceBar: {
    marginBottom: Layout.spacing.xs,
  },
  confidenceLabel: {
    fontSize: Fonts.sizes.xs,
    fontFamily: Fonts.families.roboto.medium,
    color: Colors.text.secondary,
    textAlign: 'right',
  },
  recommendationCard: {
    marginBottom: Layout.spacing.lg,
    backgroundColor: Colors.background.card,
  },
  recommendationContent: {
    alignItems: 'center',
  },
  fertilizerName: {
    fontSize: Fonts.sizes.xl,
    fontFamily: Fonts.families.poppins.bold,
    color: Colors.text.primary,
    textAlign: 'center',
    marginBottom: Layout.spacing.lg,
  },
  recommendationConfidence: {
    width: '100%',
    marginBottom: Layout.spacing.lg,
  },
  detailsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: Colors.primary.green + '10',
    paddingHorizontal: Layout.spacing.lg,
    paddingVertical: Layout.spacing.sm,
    borderRadius: Layout.radius.md,
  },
  detailsButtonText: {
    fontSize: Fonts.sizes.sm,
    fontFamily: Fonts.families.poppins.medium,
    color: Colors.primary.green,
    marginRight: Layout.spacing.xs,
  },
  actionButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: Layout.spacing.lg,
  },
  actionButton: {
    flex: 0.48,
    alignItems: 'center',
    paddingVertical: Layout.spacing.lg,
    borderRadius: Layout.radius.lg,
    shadowColor: Colors.shadow,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  detailsActionButton: {
    backgroundColor: Colors.background.card,
    borderWidth: 1,
    borderColor: Colors.border,
  },
  agrovetActionButton: {
    backgroundColor: Colors.primary.green,
  },
  actionButtonIcon: {
    fontSize: 24,
    marginBottom: Layout.spacing.xs,
  },
  actionButtonText: {
    fontSize: Fonts.sizes.sm,
    fontFamily: Fonts.families.poppins.medium,
  },
  agrovetButtonText: {
    color: Colors.text.white,
  },
  explanationCard: {
    backgroundColor: Colors.background.card,
  },
  explanationHeader: {
    marginBottom: Layout.spacing.md,
  },
  explanationText: {
    fontSize: Fonts.sizes.base,
    fontFamily: Fonts.families.roboto.regular,
    color: Colors.text.secondary,
    lineHeight: Fonts.sizes.base * Fonts.lineHeights.relaxed,
    marginBottom: Layout.spacing.md,
  },
  readMoreButton: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'flex-start',
  },
  readMoreText: {
    fontSize: Fonts.sizes.sm,
    fontFamily: Fonts.families.poppins.medium,
    color: Colors.primary.green,
    marginRight: Layout.spacing.xs,
  },
});