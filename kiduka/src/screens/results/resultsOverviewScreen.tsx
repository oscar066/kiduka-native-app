// src/screens/results/ResultsOverviewScreen.tsx
import { Ionicons } from "@expo/vector-icons";
import { StatusBar } from "expo-status-bar";
import React, { useCallback, useMemo, useState } from "react";
import {
  Alert,
  Dimensions,
  InteractionManager,
  Linking,
  Platform,
  ScrollView,
  Share,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from "react-native";
import { SafeAreaView } from "react-native-safe-area-context";
import { Card } from "../../components/ui/cards/card";
import { ProgressBar } from "../../components/ui/progressBar";
import { StatusBadge } from "../../components/ui/statusBadge";
import { Colors } from "../../constants";
import { SoilAnalysisResult } from "../../types/soil";

interface ResultsOverviewScreenProps {
  results: SoilAnalysisResult;
  onBack: () => void;
  onSaveToFavorites: () => void;
}

// Memoized components for performance
const MemoizedProgressBar = React.memo(ProgressBar);
const MemoizedStatusBadge = React.memo(StatusBadge);

export const ResultsOverviewScreen: React.FC<ResultsOverviewScreenProps> = ({
  results,
  onBack,
  onSaveToFavorites,
}) => {
  const [expandedSections, setExpandedSections] = useState<Set<string>>(
    new Set()
  );

  // Memoized calculations - Facebook style optimization
  const metrics = useMemo(() => {
    const soilScore = Math.round(results.soil_fertility_confidence * 100);
    const fertilizerConfidence = Math.round(
      results.fertilizer_confidence * 100
    );
    const formattedDate = new Date(results.timestamp).toLocaleDateString(
      "en-US",
      {
        month: "short",
        day: "numeric",
        year: "numeric",
      }
    );

    return {
      soilScore,
      fertilizerConfidence,
      formattedDate,
      statusColor: getStatusColor(results.soil_fertility_status),
    };
  }, [results]);

  const prioritizedRecommendations = useMemo(() => {
    const recs = results.structured_response?.recommendations || [];
    return {
      critical: recs.filter((r) => r.priority === "high"),
      important: recs.filter((r) => r.priority === "medium"),
      suggested: recs.filter((r) => r.priority === "low"),
    };
  }, [results.structured_response?.recommendations]);

  const nearestAgrovets = useMemo(() => {
    const agrovets = results.nearest_agrovets || [];
    return agrovets.slice(0, 3); // Limit for performance
  }, [results.nearest_agrovets]);

  // Performance-optimized callbacks
  const toggleSection = useCallback((section: string) => {
    setExpandedSections((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(section)) {
        newSet.delete(section);
      } else {
        newSet.add(section);
      }
      return newSet;
    });
  }, []);

  const handleShare = useCallback(async () => {
    // Non-blocking interaction
    InteractionManager.runAfterInteractions(async () => {
      try {
        const shareContent = `ðŸŒ± Soil Analysis Results
ðŸ“Š Score: ${metrics.soilScore}/100 (${results.soil_fertility_status})
ðŸ’Š Recommended: ${results.fertilizer_recommendation}
ðŸ“… ${metrics.formattedDate}

Generated by Kiduka Agriculture`;

        await Share.share({
          message: shareContent,
          title: "Soil Analysis Results",
        });
      } catch (error) {
        console.error("Share error:", error);
      }
    });
  }, [metrics, results]);

  const handleAgrovetAction = useCallback(
    (action: "call" | "navigate", agrovet: any) => {
      if (action === "call" && agrovet.phone) {
        Linking.openURL(`tel:${agrovet.phone}`);
      } else if (action === "navigate") {
        const url = `https://maps.google.com/?q=${agrovet.latitude},${agrovet.longitude}`;
        Linking.openURL(url).catch(() => {
          Alert.alert("Error", "Could not open maps");
        });
      }
    },
    []
  );

  // Helper function moved outside for performance
  function getStatusColor(status: string): string {
    const statusMap: Record<string, string> = {
      excellent: Colors.status.success,
      good: Colors.status.success,
      fair: Colors.status.warning,
      moderate: Colors.status.warning,
      poor: Colors.status.error,
      low: Colors.status.error,
    };
    return statusMap[status.toLowerCase()] || Colors.text.secondary;
  }

  // Component builders - Facebook pattern for complex UIs
  const Header = useCallback(
    () => (
      <View style={styles.header}>
        <TouchableOpacity
          onPress={onBack}
          style={styles.iconButton}
          activeOpacity={0.7}
        >
          <Ionicons name="arrow-back" size={24} color={Colors.text.primary} />
        </TouchableOpacity>

        <View style={styles.headerCenter}>
          <Text style={styles.headerTitle}>Analysis Results</Text>
          <Text style={styles.headerDate}>{metrics.formattedDate}</Text>
        </View>

        <View style={styles.headerActions}>
          <TouchableOpacity
            onPress={handleShare}
            style={styles.iconButton}
            activeOpacity={0.7}
          >
            <Ionicons
              name="share-outline"
              size={22}
              color={Colors.text.primary}
            />
          </TouchableOpacity>
          <TouchableOpacity
            onPress={onSaveToFavorites}
            style={styles.iconButton}
            activeOpacity={0.7}
          >
            <Ionicons
              name="bookmark-outline"
              size={22}
              color={Colors.text.primary}
            />
          </TouchableOpacity>
        </View>
      </View>
    ),
    [metrics.formattedDate, handleShare, onBack, onSaveToFavorites]
  );

  const SoilHealthCard = useCallback(
    () => (
      <Card style={styles.primaryCard}>
        <View style={styles.scoreSection}>
          <View
            style={[styles.scoreRing, { borderColor: metrics.statusColor }]}
          >
            <Text style={[styles.scoreValue, { color: metrics.statusColor }]}>
              {metrics.soilScore}
            </Text>
            <Text style={styles.scoreMax}>/100</Text>
          </View>

          <View style={styles.scoreInfo}>
            <MemoizedStatusBadge
              status={results.soil_fertility_status}
              variant="soil"
              size="lg"
            />
            <Text style={styles.scoreLabel}>Soil Health Score</Text>

            {/* Confidence meter */}
            <View style={styles.confidenceMeter}>
              <View style={styles.confidenceTrack}>
                <View
                  style={[
                    styles.confidenceFill,
                    {
                      width: `${metrics.soilScore}%`,
                      backgroundColor: metrics.statusColor,
                    },
                  ]}
                />
              </View>
              <Text style={styles.confidenceText}>
                {metrics.soilScore}% confidence
              </Text>
            </View>
          </View>
        </View>
      </Card>
    ),
    [metrics, results.soil_fertility_status]
  );

  const RecommendationCard = useCallback(
    () => (
      <Card style={styles.secondaryCard}>
        <View style={styles.cardHeader}>
          <View style={styles.cardIcon}>
            <Ionicons name="leaf" size={20} color={Colors.primary.green} />
          </View>
          <View style={styles.cardHeaderText}>
            <Text style={styles.cardTitle}>Fertilizer Recommendation</Text>
            <Text style={styles.cardSubtitle}>Optimized for your soil</Text>
          </View>
        </View>

        <View style={styles.recommendationContent}>
          <Text style={styles.fertilizerName}>
            {results.fertilizer_recommendation}
          </Text>

          <View style={styles.confidenceRow}>
            <MemoizedProgressBar
              progress={results.fertilizer_confidence}
              showPercentage={false}
              color={Colors.primary.green}
              style={styles.progressBar}
            />
            <Text style={styles.confidenceLabel}>
              {metrics.fertilizerConfidence}%
            </Text>
          </View>

          {results.structured_response?.fertilizer_justification && (
            <Text style={styles.justification} numberOfLines={3}>
              {results.structured_response.fertilizer_justification}
            </Text>
          )}
        </View>
      </Card>
    ),
    [results, metrics.fertilizerConfidence]
  );

  const KeyMetrics = useCallback(() => {
    const explanation = results.structured_response?.explanation;
    if (!explanation) return null;

    const insights = [
      {
        icon: "flask-outline",
        label: "pH Level",
        value: "Analyzed",
        color: Colors.status.info,
      },
      {
        icon: "layers-outline",
        label: "Texture",
        value: "Assessed",
        color: Colors.status.warning,
      },
      {
        icon: "nutrition-outline",
        label: "Nutrients",
        value: "Evaluated",
        color: Colors.primary.green,
      },
    ];

    return (
      <Card style={styles.metricsCard}>
        <Text style={styles.sectionTitle}>Key Metrics</Text>
        <View style={styles.metricsGrid}>
          {insights.map((insight, index) => (
            <View key={index} style={styles.metricItem}>
              <View
                style={[
                  styles.metricIcon,
                  { backgroundColor: insight.color + "15" },
                ]}
              >
                <Ionicons
                  name={insight.icon as any}
                  size={18}
                  color={insight.color}
                />
              </View>
              <Text style={styles.metricLabel}>{insight.label}</Text>
              <Text style={styles.metricValue}>{insight.value}</Text>
            </View>
          ))}
        </View>
      </Card>
    );
  }, [results.structured_response?.explanation]);

  const ActionItems = useCallback(() => {
    const hasActions =
      prioritizedRecommendations.critical.length > 0 ||
      prioritizedRecommendations.important.length > 0;

    if (!hasActions) return null;

    const isExpanded = expandedSections.has("actions");
    const totalActions =
      prioritizedRecommendations.critical.length +
      prioritizedRecommendations.important.length +
      prioritizedRecommendations.suggested.length;

    return (
      <Card style={styles.actionsCard}>
        <TouchableOpacity
          style={styles.expandableHeader}
          onPress={() => toggleSection("actions")}
          activeOpacity={0.7}
        >
          <View style={styles.cardHeader}>
            <View style={styles.cardIcon}>
              <Ionicons
                name="checkmark-circle-outline"
                size={20}
                color={Colors.primary.green}
              />
            </View>
            <View style={styles.cardHeaderText}>
              <Text style={styles.cardTitle}>Action Items</Text>
              <Text style={styles.cardSubtitle}>
                {totalActions} recommendations
              </Text>
            </View>
          </View>
          <Ionicons
            name={isExpanded ? "chevron-up" : "chevron-down"}
            size={20}
            color={Colors.text.secondary}
          />
        </TouchableOpacity>

        {/* Always show critical items */}
        {prioritizedRecommendations.critical.map((rec, index) => (
          <ActionItem
            key={`critical-${index}`}
            recommendation={rec}
            priority="critical"
          />
        ))}

        {/* Show other items when expanded */}
        {isExpanded && (
          <>
            {prioritizedRecommendations.important.map((rec, index) => (
              <ActionItem
                key={`important-${index}`}
                recommendation={rec}
                priority="important"
              />
            ))}
            {prioritizedRecommendations.suggested.map((rec, index) => (
              <ActionItem
                key={`suggested-${index}`}
                recommendation={rec}
                priority="suggested"
              />
            ))}
          </>
        )}

        {!isExpanded &&
          (prioritizedRecommendations.important.length > 0 ||
            prioritizedRecommendations.suggested.length > 0) && (
            <TouchableOpacity
              style={styles.showMoreButton}
              onPress={() => toggleSection("actions")}
              activeOpacity={0.7}
            >
              <Text style={styles.showMoreText}>
                Show{" "}
                {prioritizedRecommendations.important.length +
                  prioritizedRecommendations.suggested.length}{" "}
                more
              </Text>
              <Ionicons
                name="chevron-down"
                size={16}
                color={Colors.primary.green}
              />
            </TouchableOpacity>
          )}
      </Card>
    );
  }, [prioritizedRecommendations, expandedSections, toggleSection]);

  const ActionItem = React.memo(
    ({
      recommendation,
      priority,
    }: {
      recommendation: any;
      priority: "critical" | "important" | "suggested";
    }) => {
      const priorityStyles = {
        critical: {
          color: Colors.status.error,
          bg: Colors.status.error + "08",
        },
        important: {
          color: Colors.status.warning,
          bg: Colors.status.warning + "08",
        },
        suggested: {
          color: Colors.status.success,
          bg: Colors.status.success + "08",
        },
      };

      const style = priorityStyles[priority];

      return (
        <View style={[styles.actionItem, { backgroundColor: style.bg }]}>
          <View style={styles.actionHeader}>
            <View
              style={[styles.priorityBadge, { backgroundColor: style.color }]}
            >
              <Text style={styles.priorityText}>{priority.toUpperCase()}</Text>
            </View>
            <Text style={styles.timeframe}>{recommendation.timeframe}</Text>
          </View>
          <Text style={styles.actionText}>{recommendation.action}</Text>
          <Text style={styles.actionReason} numberOfLines={2}>
            {recommendation.reasoning}
          </Text>
        </View>
      );
    }
  );

  const NearbyStores = useCallback(() => {
    if (!nearestAgrovets.length) return null;

    const isExpanded = expandedSections.has("stores");

    return (
      <Card style={styles.storesCard}>
        <TouchableOpacity
          style={styles.expandableHeader}
          onPress={() => toggleSection("stores")}
          activeOpacity={0.7}
        >
          <View style={styles.cardHeader}>
            <View style={styles.cardIcon}>
              <Ionicons
                name="storefront-outline"
                size={20}
                color={Colors.primary.green}
              />
            </View>
            <View style={styles.cardHeaderText}>
              <Text style={styles.cardTitle}>Nearby Agrovets</Text>
              <Text style={styles.cardSubtitle}>
                {nearestAgrovets.length} locations found
              </Text>
            </View>
          </View>
          <Ionicons
            name={isExpanded ? "chevron-up" : "chevron-down"}
            size={20}
            color={Colors.text.secondary}
          />
        </TouchableOpacity>

        {/* Always show closest */}
        <AgrovetItem agrovet={nearestAgrovets[0]} isClosest={true} />

        {/* Show others when expanded */}
        {isExpanded &&
          nearestAgrovets
            .slice(1)
            .map((agrovet, index) => (
              <AgrovetItem
                key={index + 1}
                agrovet={agrovet}
                isClosest={false}
              />
            ))}

        {!isExpanded && nearestAgrovets.length > 1 && (
          <TouchableOpacity
            style={styles.showMoreButton}
            onPress={() => toggleSection("stores")}
            activeOpacity={0.7}
          >
            <Text style={styles.showMoreText}>
              Show {nearestAgrovets.length - 1} more locations
            </Text>
            <Ionicons
              name="chevron-down"
              size={16}
              color={Colors.primary.green}
            />
          </TouchableOpacity>
        )}
      </Card>
    );
  }, [nearestAgrovets, expandedSections, toggleSection]);

  const AgrovetItem = React.memo(
    ({ agrovet, isClosest }: { agrovet: any; isClosest: boolean }) => (
      <View style={[styles.storeItem, isClosest && styles.closestStore]}>
        <View style={styles.storeHeader}>
          <View style={styles.storeInfo}>
            <Text style={styles.storeName}>{agrovet.name.trim()}</Text>
            <View style={styles.distanceRow}>
              <Ionicons
                name="location"
                size={12}
                color={isClosest ? Colors.primary.green : Colors.text.secondary}
              />
              <Text
                style={[
                  styles.distance,
                  isClosest && { color: Colors.primary.green },
                ]}
              >
                {agrovet.distance_km.toFixed(1)} km
              </Text>
            </View>
          </View>
          {isClosest && (
            <View style={styles.closestBadge}>
              <Text style={styles.closestText}>CLOSEST</Text>
            </View>
          )}
        </View>

        {/* Products */}
        <View style={styles.products}>
          {agrovet.products
            .slice(0, 2)
            .map((product: string, index: number) => (
              <View key={index} style={styles.productTag}>
                <Text style={styles.productName}>{product}</Text>
                <Text style={styles.productPrice}>
                  KSh {agrovet.prices[index]}
                </Text>
              </View>
            ))}
        </View>

        {/* Actions */}
        <View style={styles.storeActions}>
          <TouchableOpacity
            style={styles.primaryButton}
            onPress={() => handleAgrovetAction("navigate", agrovet)}
            activeOpacity={0.8}
          >
            <Ionicons name="navigate" size={16} color="white" />
            <Text style={styles.primaryButtonText}>Directions</Text>
          </TouchableOpacity>

          {agrovet.phone && (
            <TouchableOpacity
              style={styles.secondaryButton}
              onPress={() => handleAgrovetAction("call", agrovet)}
              activeOpacity={0.8}
            >
              <Ionicons name="call" size={16} color={Colors.primary.green} />
              <Text style={styles.secondaryButtonText}>Call</Text>
            </TouchableOpacity>
          )}
        </View>
      </View>
    )
  );

  return (
    <SafeAreaView style={styles.container} edges={["top"]}>
      <StatusBar style="dark" />

      <Header />

      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
        removeClippedSubviews={true} // Facebook optimization
      >
        <SoilHealthCard />
        <RecommendationCard />
        <KeyMetrics />
        <ActionItems />
        <NearbyStores />
      </ScrollView>
    </SafeAreaView>
  );
};

// Facebook-style performance optimization
const { width } = Dimensions.get("window");
const CARD_MARGIN = 16;
const CONTENT_WIDTH = width - CARD_MARGIN * 2;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F8F9FA", // Facebook's background color
  },

  // Header - Clean and functional
  header: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: "white",
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: "#E5E7EB",
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 2,
      },
      android: { elevation: 1 },
    }),
  },
  iconButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: "center",
    alignItems: "center",
  },
  headerCenter: {
    flex: 1,
    alignItems: "center",
    marginHorizontal: 16,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#1F2937",
    fontFamily: Platform.OS === "ios" ? "System" : "Roboto",
  },
  headerDate: {
    fontSize: 13,
    color: "#6B7280",
    marginTop: 1,
    fontFamily: Platform.OS === "ios" ? "System" : "Roboto",
  },
  headerActions: {
    flexDirection: "row",
  },

  // Scroll container
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: CARD_MARGIN,
    paddingBottom: 32,
  },

  // Card system - Facebook style
  primaryCard: {
    backgroundColor: "white",
    borderRadius: 12,
    padding: 20,
    marginBottom: 12,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.08,
        shadowRadius: 8,
      },
      android: { elevation: 3 },
    }),
  },
  secondaryCard: {
    backgroundColor: "white",
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 4,
      },
      android: { elevation: 2 },
    }),
  },
  metricsCard: {
    backgroundColor: "white",
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 4,
      },
      android: { elevation: 2 },
    }),
  },
  actionsCard: {
    backgroundColor: "white",
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 4,
      },
      android: { elevation: 2 },
    }),
  },
  storesCard: {
    backgroundColor: "white",
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    ...Platform.select({
      ios: {
        shadowColor: "#000",
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.05,
        shadowRadius: 4,
      },
      android: { elevation: 2 },
    }),
  },

  // Score section - Hero component
  scoreSection: {
    flexDirection: "row",
    alignItems: "center",
  },
  scoreRing: {
    width: 80,
    height: 80,
    borderRadius: 40,
    borderWidth: 4,
    justifyContent: "center",
    alignItems: "center",
    marginRight: 20,
  },
  scoreValue: {
    fontSize: 24,
    fontWeight: "700",
    fontFamily: Platform.OS === "ios" ? "System" : "Roboto",
  },
  scoreMax: {
    fontSize: 12,
    color: "#6B7280",
    fontWeight: "500",
  },
  scoreInfo: {
    flex: 1,
  },
  scoreLabel: {
    fontSize: 14,
    color: "#6B7280",
    marginTop: 8,
    marginBottom: 12,
  },
  confidenceMeter: {
    width: "100%",
  },
  confidenceTrack: {
    height: 4,
    backgroundColor: "#E5E7EB",
    borderRadius: 2,
    overflow: "hidden",
  },
  confidenceFill: {
    height: "100%",
    borderRadius: 2,
  },
  confidenceText: {
    fontSize: 12,
    color: "#6B7280",
    marginTop: 4,
    textAlign: "right",
  },

  // Card headers - Consistent pattern
  cardHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 16,
  },
  cardIcon: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: "#10B981" + "15",
    justifyContent: "center",
    alignItems: "center",
    marginRight: 12,
  },
  cardHeaderText: {
    flex: 1,
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#1F2937",
    fontFamily: Platform.OS === "ios" ? "System" : "Roboto",
  },
  cardSubtitle: {
    fontSize: 13,
    color: "#6B7280",
    marginTop: 1,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#1F2937",
    marginBottom: 16,
    fontFamily: Platform.OS === "ios" ? "System" : "Roboto",
  },

  // Recommendation content
  recommendationContent: {
    gap: 16,
  },
  fertilizerName: {
    fontSize: 18,
    fontWeight: "600",
    color: "#1F2937",
    textAlign: "center",
  },
  confidenceRow: {
    flexDirection: "row",
    alignItems: "center",
    gap: 12,
  },
  progressBar: {
    flex: 1,
  },
  confidenceLabel: {
    fontSize: 14,
    fontWeight: "600",
    color: "#10B981",
    minWidth: 40,
  },
  justification: {
    fontSize: 14,
    color: "#6B7280",
    lineHeight: 20,
    textAlign: "center",
  },

  // Metrics grid
  metricsGrid: {
    flexDirection: "row",
    gap: 12,
  },
  metricItem: {
    flex: 1,
    alignItems: "center",
    padding: 12,
    backgroundColor: "#F9FAFB",
    borderRadius: 8,
  },
  metricIcon: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 8,
  },
  metricLabel: {
    fontSize: 12,
    color: "#6B7280",
    textAlign: "center",
    marginBottom: 2,
  },
  metricValue: {
    fontSize: 13,
    fontWeight: "500",
    color: "#1F2937",
    textAlign: "center",
  },

  // Expandable sections
  expandableHeader: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: 16,
  },

  // Action items
  actionItem: {
    padding: 16,
    borderRadius: 8,
    marginBottom: 8,
    borderLeftWidth: 3,
    borderLeftColor: "#E5E7EB",
  },
  actionHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 8,
  },
  priorityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  priorityText: {
    fontSize: 10,
    fontWeight: "700",
    color: "white",
    letterSpacing: 0.5,
  },
  timeframe: {
    fontSize: 12,
    color: "#6B7280",
  },
  actionText: {
    fontSize: 14,
    fontWeight: "500",
    color: "#1F2937",
    marginBottom: 4,
  },
  actionReason: {
    fontSize: 13,
    color: "#6B7280",
    lineHeight: 18,
  },

  // Show more button
  showMoreButton: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    gap: 4,
    paddingVertical: 12,
    marginTop: 8,
    borderTopWidth: StyleSheet.hairlineWidth,
    borderTopColor: "#E5E7EB",
  },
  showMoreText: {
    fontSize: 14,
    fontWeight: "500",
    color: "#10B981",
  },

  // Store items
  storeItem: {
    padding: 16,
    backgroundColor: "#F9FAFB",
    borderRadius: 8,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: "#E5E7EB",
  },
  closestStore: {
    borderColor: "#10B981",
    backgroundColor: "#10B981" + "08",
  },
  storeHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "flex-start",
    marginBottom: 12,
  },
  storeInfo: {
    flex: 1,
  },
  storeName: {
    fontSize: 15,
    fontWeight: "500",
    color: "#1F2937",
    marginBottom: 4,
  },
  distanceRow: {
    flexDirection: "row",
    alignItems: "center",
    gap: 4,
  },
  distance: {
    fontSize: 13,
    color: "#6B7280",
  },
  closestBadge: {
    backgroundColor: "#10B981",
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  closestText: {
    fontSize: 10,
    fontWeight: "700",
    color: "white",
    letterSpacing: 0.5,
  },

  // Products
  products: {
    flexDirection: "row",
    gap: 8,
    marginBottom: 16,
    flexWrap: "wrap",
  },
  productTag: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "white",
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: "#E5E7EB",
    gap: 6,
  },
  productName: {
    fontSize: 12,
    color: "#374151",
    fontWeight: "500",
  },
  productPrice: {
    fontSize: 12,
    color: "#10B981",
    fontWeight: "600",
  },

  // Store actions
  storeActions: {
    flexDirection: "row",
    gap: 8,
  },
  primaryButton: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#10B981",
    paddingVertical: 12,
    borderRadius: 8,
    gap: 6,
  },
  primaryButtonText: {
    fontSize: 14,
    fontWeight: "600",
    color: "white",
  },
  secondaryButton: {
    flex: 1,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "white",
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#10B981",
    gap: 6,
  },
  secondaryButtonText: {
    fontSize: 14,
    fontWeight: "600",
    color: "#10B981",
  },
});
